import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn
import sklearn.preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC


df = pd.read_csv(
    r'/FeedingDashboarddata.csv')
df=df.drop(['encounterId','sip'],axis=1)
df=df.dropna(axis=0, thresh=7)
print("NEW: ",df.head())
for feature in df:
    df[feature] = df[feature].replace(np.nan,0)
sns.heatmap(df.isnull())
print ("Total size of data: ",len(df))
print("Total null values per column:")
df.isnull().sum()
print("Number of positives/referrals: ",df['referral'].sum())
print(df['referral'].count())

x = df.drop(columns='referral', axis=1)


y = df["referral"]
print("Shape of X data:\n ", x.head())
print("Shape of Y data:\n ", y.head())

scaler = StandardScaler()

scaler.fit(x)
standardizeddata = scaler.transform(x)
x = standardizeddata



print("Line one of the X dataset to confirm values have been scaled: ")
print(x[0])

x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, stratify=y, random_state=33)

print("X shape: ", x.shape, "X Train shape: ",
      x_train.shape, "X Test shape: ", x_test.shape)

print(y.sum())

param_grid = {'C': [0.0001,0.01, 0.1, 1, 10, 100, 1000,100000], 'gamma': [
0.001, 0.1, 1,10], 'kernel': ['rbf']}
gridsearch = GridSearchCV(SVC(class_weight={0:1}), param_grid, refit=True, verbose=2)

gridsearch.fit(x_train, y_train)

bestparams=gridsearch.best_estimator_

grid_predictions = gridsearch.predict(x_test)

print(gridsearch.best_estimator_)
print(classification_report(y_test, grid_predictions))
print(confusion_matrix(y_test,grid_predictions))

param_grid = {'C': [0.0001,0.01, 0.1, 1, 10, 100, 1000,], 'gamma': [
0.001, 0.1, 1,10], 'kernel': ['poly']}
gridsearch = GridSearchCV(SVC(class_weight={0:1}), param_grid, refit=True, verbose=2)

gridsearch.fit(x_train, y_train)

bestparams=gridsearch.best_estimator_

grid_predictions = gridsearch.predict(x_train)
print(grid_predictions)

print(classification_report(y_train, grid_predictions))
print(confusion_matrix(y_train,grid_predictions))